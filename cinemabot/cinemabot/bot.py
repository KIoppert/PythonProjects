import asyncio
import logging
import os
import re
import sys
import time

import pydantic_core
from aiogram import Bot, types, BaseMiddleware, Dispatcher
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup
from dotenv import load_dotenv

from .database import register_user, update_history, get_user_history, open_connection, get_user_stats, \
    clear_user_history, add_or_show_wishlist, remove_from_wishlist
from .utils import get_film_info_from_kinopoisk, make_buttons_on_films

load_dotenv()

bot = Bot(token=os.environ['BOT_TOKEN'])
dp = Dispatcher()


async def send_typing_animation(chat_id: int, msg_id: int):
    for i in range(1, 60):
        await asyncio.sleep(0.1)
        try:
            await bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                        text=f"üîç –ò—â—É —Ñ–∏–ª—å–º{'.' * (i % 5)}")
        except TelegramBadRequest:  # if message was deleted before the end of the loop
            break


class CheckUserRegistration(BaseMiddleware):
    async def __call__(self, handler, event: types.Message, data: dict):
        if event.content_type == ContentType.TEXT and event.text == '/start':
            return await handler(event, data)
        user_id = event.from_user.id
        if not await register_user(user_id, check=True):
            await event.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω( –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        return await handler(event, data)


dp.message.middleware(CheckUserRegistration())


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    try:
        if await register_user(message.from_user.id):
            await message.reply(
                "üëã *–ü—Ä–∏–≤–µ—Ç!* –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ. "
                "–ê "
                "—Ç–∞–∫–∂–µ –≥–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
                "\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–æ —Ç–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç "
                "–ø–æ–¥–≤–µ—Å—Ç–∏!)\n"
                "–¢–∞–∫ –∂–µ —è –µ—â–µ —Å–æ—Ö—Ä–∞–Ω—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤ /help",
                parse_mode='Markdown')
        else:
            await message.reply(
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    except Exception as e:
        logging.error(f"Error in send_welcome: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.reply(
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –Ω–µ "
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–æ —Ç–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –ø–æ–¥–≤–µ—Å—Ç–∏!).\n\n"
        "<b>–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "/stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n"
        "/history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/clear - –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∞ —Ç–∞–∫–∂–µ –≤–∏—à–ª–∏—Å—Ç\n"
        "/add_to_wishlist - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ\n"
        "/remove_from_wishlist num - —É–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º num\n"
        "/wishlist - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n"
        "/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n",
        parse_mode='html')


@dp.message(Command("add_to_wishlist"))
async def add_to_wishlist(message: types.Message):
    film = await add_or_show_wishlist(message.from_user.id, show=False)
    if film:
        await message.reply(f"‚úÖ –î–æ–±–∞–≤–∏–ª {film} –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ")
    else:
        await message.reply("‚ùå –¢—ã –µ—â–µ –Ω–µ –∏—Å–∫–∞–ª –Ω–∏–∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ")


@dp.message(Command("remove_from_wishlist"))
async def remove_from_wl(message: types.Message):
    try:
        num = int(message.text.split()[1])
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return
    if await remove_from_wishlist(message.from_user.id, num):
        await message.reply(f"‚úÖ –§–∏–ª—å–º –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {num} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ")
    else:
        await message.reply("‚ùå –§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∂–µ–ª–∞–µ–º–æ–≥–æ")


@dp.message(Command("wishlist"))
async def show_wishlist(message: types.Message):
    wishlist = await add_or_show_wishlist(message.from_user.id, show=True)
    answer = "–í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
    if wishlist:
        for num, film in enumerate(wishlist[:-11:-1], start=1):
            answer += f"\t\t*{num})* '{film}'\n"
        await message.reply(answer, parse_mode='Markdown')
    else:
        await message.reply("‚ùå –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—É—Å—Ç, –ø–æ—Ä–∞ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å!")


@dp.message(Command("history"))
async def send_history(message: types.Message):
    history = await get_user_history(message.from_user.id)
    answer = "–í–æ—Ç —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
    if history:
        for num, (query, film) in enumerate(history[:-11:-1], start=1):
            answer += f"\t\t*{num})* '{query}' *->* '{film}'\n"
        await message.reply(answer, parse_mode='Markdown')
    else:
        await message.reply("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")


@dp.message(Command("stats"))
async def send_stats(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    answer = "–í–æ—Ç —Ç–≤–æ–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n"
    if stats:
        for film, count in sorted(stats.items(), key=lambda x: x[1], reverse=True)[:6:]:
            answer += f"\t\t*{film}*: {count} —Ä–∞–∑(–∞)\n"
        await message.reply(answer, parse_mode='Markdown')
    else:
        await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")


@dp.message(Command("clear"))
async def clear_history(message: types.Message):
    await clear_user_history(message.from_user.id)
    await message.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")


@dp.message(Command("ping"))
async def ping(message: types.Message):
    await message.reply("‚úÖ Pong! –Ø –≤ —Å–µ—Ç–∏! ‚úÖ")


@dp.message(Command(re.compile(r".*")))
async def command(message: types.Message):
    await message.reply("‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚ùå")


@dp.message()
async def find_film(message: types.Message):
    start = time.time()
    if message.content_type != ContentType.TEXT:
        await message.reply("‚ùå –Ø –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è( ‚ùå")
        return
    logging.info(f"User {message.from_user.id} sent message: {message.text}")
    typing_message = await bot.send_message(message.from_user.id, "üîç –ò—â—É —Ñ–∏–ª—å–º")
    asyncio.create_task(send_typing_animation(message.from_user.id, typing_message.message_id))
    film = await get_film_info_from_kinopoisk(message.text)
    logging.info(f"Time to get film info: {time.time() - start}")
    if film is not None:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[await make_buttons_on_films(film)])
        logging.info(f"Time to make buttons: {time.time() - start}")
        try:
            await update_history(message.from_user.id, message.text, film)
            logging.info(f"Time to update history: {time.time() - start}")
            await bot.send_photo(message.from_user.id, photo=film.poster, caption=str(film), parse_mode='Markdown',
                                 reply_markup=keyboard)
        except (pydantic_core.ValidationError, TelegramBadRequest):
            await bot.send_photo(message.from_user.id, photo='https://imgur.com/R7GjQi9',
                                 caption='‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º ‚ùå'),
    else:
        await bot.send_photo(message.from_user.id, photo='https://imgur.com/R7GjQi9',
                             caption="‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ kinopoisk. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π ‚ùå")
    logging.info(f"Time to send message: {time.time() - start}")
    await bot.delete_message(message.from_user.id, typing_message.message_id)


async def main() -> None:
    await open_connection()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
